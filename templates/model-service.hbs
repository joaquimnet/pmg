const { {{properCase name}} } = require('../../models');

module.exports = {
  name: '{{dashCase name}}',
  routes: {
    'GET /{{dashCase name}}/:id': 'get{{properCase name}}',
    'POST /{{dashCase name}}': 'post{{properCase name}}',
    'PATCH /{{dashCase name}}/:id': 'patch{{properCase name}}',
    'DELETE /{{dashCase name}}/:id': 'delete{{properCase name}}',
  },
  actions: {
    get{{properCase name}}: {
      params: {
        id: 'string',
        $$strict: true,
      },
      async handler(req, res) {
        const params = { ...req.body, ...req.query, ...req.params };

        const {{camelCase name}} = await {{properCase name}}.findById(params.id);
        if (!{{camelCase name}}) {
          return res.status(404).json({ message: '{{properCase name}} not found' });
        }

        return res.json({{camelCase name}}.safe());
      },
    },
    post{{properCase name}}: {
      params: {
        name: { type: 'string', min: 2 },
        description: { type: 'string', min: 2 },
        $$strict: true,
      },
      async handler(req, res) {
        const params = { ...req.body, ...req.query, ...req.params };

        const {{camelCase name}} = new {{properCase name}}({
          name: params.name,
          description: params.description,
        });

        await {{camelCase name}}.save();

        return res.json({{camelCase name}}.safe());
      },
    },
    patch{{properCase name}}: {
      params: {
        id: 'string',
        name: { type: 'string', min: 2, optional: true },
        description: { type: 'string', min: 2, optional: true },
        $$strict: true,
      },
      async handler(req, res) {
        const params = { ...req.body, ...req.query, ...req.params };

        const {{camelCase name}} = await {{properCase name}}.findById(params.id);
        if (!{{camelCase name}}) {
          return res.status(404).json({ message: '{{properCase name}} not found' });
        }

        if (params.name || params.description) {
          if (params.name) {{camelCase name}}.name = params.name;
          if (params.description) {{camelCase name}}.description = params.description;
          await {{camelCase name}}.save();
        }

        return res.json({{camelCase name}}.safe());
      },
    },
    delete{{properCase name}}: {
      params: {
        id: 'string',
        $$strict: true,
      },
      async handler(req, res) {
        const params = { ...req.body, ...req.query, ...req.params };

        await {{properCase name}}.deleteOne({ _id: params.id });

        return res.status(204).end();
      },
    },
  },
};
